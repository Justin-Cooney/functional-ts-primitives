import { ResultMatchType, Result } from "./ResultTypes";
import * as Extensions from "./ResultExtensions";

export const resultFromMatch = <TSuccess, TFailure>(match: ResultMatchType<TSuccess, TFailure>) : Result<TSuccess, TFailure> => ({
	match: match,
	matchAsync: Extensions.matchAsync(match),
	toString: Extensions.toString(match),
	isSuccess: Extensions.isSuccess(match),
	toPromise: Extensions.toPromise(match),
	success: Extensions.success(match),
	failure: Extensions.failure(match),
	map: Extensions.map(match),
	mapAsync: Extensions.mapAsync(match),
	mapFailure: Extensions.mapFailure(match),
	mapFailureAsync: Extensions.mapFailureAsync(match),
	tryMap: Extensions.tryMap(match),
	tryMapAsync: Extensions.tryMapAsync(match),
	bind: Extensions.bind(match),
	bindAsync: Extensions.bindAsync(match),
	bindFailure: Extensions.bindFailure(match),
	bindFailureAsync: Extensions.bindFailureAsync(match),
	where: Extensions.where(match),
	whereAsync: Extensions.whereAsync(match),
	do: Extensions.resultDo(match),
	doAsync: Extensions.doAsync(match),
	doAlways: Extensions.doAlways(match),
	doAlwaysAsync: Extensions.doAlwaysAsync(match),
	doIfSuccessful: Extensions.doIfSuccessful(match),
	doIfSuccessfulAsync: Extensions.doIfSuccessfulAsync(match),
	doIfFailure: Extensions.doIfFailure(match),
	doIfFailureAsync: Extensions.doIfFailureAsync(match),
	apply: Extensions.apply(match),
	applyAsync: Extensions.applyAsync(match),
	applyAlways: Extensions.applyAlways(match),
	applyAlwaysAsync: Extensions.applyAlwaysAsync(match),
	applyIfFailure: Extensions.applyIfFailure(match),
	applyIfFailureAsync: Extensions.applyIfFailureAsync(match),
	applyIfSuccessful: Extensions.applyIfSuccessful(match),
	applyIfSuccessfulAsync: Extensions.applyIfSuccessfulAsync(match)
});