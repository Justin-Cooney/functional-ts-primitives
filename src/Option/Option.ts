import { Option, OptionMatchType } from "./OptionTypes";
import * as Extensions from "./OptionExtensions";

export const optionFromMatch = <TValue>(match: OptionMatchType<TValue>) : Option<TValue> => ({
	match: match,
	matchAsync: Extensions.matchAsync(match),
	toString: Extensions.toString(match),
	hasValue: Extensions.hasValue(match),
	valueOrDefault: Extensions.valueOrDefault(match),
	valueOrDefaultAsync: Extensions.valueOrDefaultAsync(match),
	defaultIfNone: Extensions.defaultIfNone(match),
	defaultIfNoneAsync: Extensions.defaultIfNoneAsync(match),
	toNullable: Extensions.toNullable(match),
	toResult: Extensions.toResult(match),
	toResultAsync: Extensions.toResultAsync(match),
	toPromise: Extensions.toPromise(match),
	map: Extensions.map(match),
	mapAsync: Extensions.mapAsync(match),
	bind: Extensions.bind(match),
	bindAsync: Extensions.bindAsync(match),
	bindOnNone: Extensions.bindOnNone(match),
	bindOnNoneAsync: Extensions.bindOnNoneAsync(match),
	where: Extensions.where(match),
	whereAsync: Extensions.whereAsync(match),
	do: Extensions.optionDo(match),
	doAsync: Extensions.doAsync(match),
	doAlways: Extensions.doAlways(match),
	doAlwaysAsync: Extensions.doAlwaysAsync(match),
	doIfSome: Extensions.doIfSome(match),
	doIfSomeAsync: Extensions.doIfSomeAsync(match),
	doIfNone: Extensions.doIfNone(match),
	doIfNoneAsync: Extensions.doIfNoneAsync(match),
	apply: Extensions.apply(match),
	applyAsync: Extensions.applyAsync(match),
	applyAlways: Extensions.applyAlways(match),
	applyAlwaysAsync: Extensions.applyAlwaysAsync(match),
	applyIfSome: Extensions.applyIfSome(match),
	applyIfSomeAsync: Extensions.applyIfSomeAsync(match),
	applyIfNone: Extensions.applyIfNone(match),
	applyIfNoneAsync: Extensions.applyIfNoneAsync(match)
});